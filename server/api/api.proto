syntax = "proto3";

// Service definition.
service Ukd {
  // Get Server Version.
  rpc GetVersion (VersionRequest) returns (VersionReply) {}

  // Start a Unikernel.
  rpc Start (StartRequest) returns (StartReply) {}

  // Stop a Unikernel.
  rpc Stop (StopRequest) returns (StopReply) {}

  // Get image signature.
  rpc GetImageSignature (ImageSignatureRequest) returns (ImageSignatureReply) {}

  // Update a Unikernel on-disk image.
  rpc UpdateImage (UpdateImageRequest) returns (UpdateImageReply) {}

  // Status of an app.
  rpc Status (StatusRequest) returns (StatusReply) {}

  // Get log of an app.
  rpc GetLog (LogRequest) returns (LogReply) {}
}

message VersionRequest {
}

// Ukd server version.
message VersionReply {
  int32 major = 1;
  string minor = 2;
}

// Request message containing image name and image location.
message StartRequest {
  string name = 1;
  string visor = 2; // hypervisor of choice (default: KVM+QEMU)
  string location = 3; // location of .img
}

// Response message signalling result of start attempt.
message StartReply {
  bool success = 1;
  string ip = 2; // IP of the running unikernel.
  string info = 3; // Additional information.
}

// Request message containing the image name.
message StopRequest {
  string name = 1;
}

// Response message signalling result of stop attempt.
message StopReply {
  bool success = 1;
  string info = 2; // Additional information.
}

message ImageSignatureRequest {
  string path = 1; // Fully qualified path of the image.
}

message ImageSignatureReply {
  bool success = 1;
  bytes signature = 2; // Signature of the image.
  string info = 3; // Additional info.
}

message UpdateImageRequest {
  string base = 1; // Base image.
  bytes basesig = 2; // Signature of the base image.
  bytes newsig = 3; // Signature of the new image.
  bytes diff = 4; // Diff of base image and new image.
}

message UpdateImageReply {
  bool success = 1;
  string stagedImagePath = 2; // Fully qualified path to new staged image on server.
  string info = 3; // Additional information.
}

message StatusRequest {
  string name = 1;
}

// Response message with status of an application.
message StatusReply {
  bool success = 1;
  string status = 2;
  string info = 3; // Additional information.
}

message LogRequest {
  string name = 1;
}

message LogReply {
  bool success = 1;
  bytes logContent = 2; // Log of the the application.
  string info = 3; // Additional information.
}
