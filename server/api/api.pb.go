// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	VersionRequest
	VersionReply
	StartRequest
	StartReply
	StopRequest
	StopReply
	ImageSignatureRequest
	ImageSignatureReply
	UpdateImageRequest
	UpdateImageReply
	StatusRequest
	StatusReply
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VersionRequest struct {
}

func (m *VersionRequest) Reset()                    { *m = VersionRequest{} }
func (m *VersionRequest) String() string            { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()               {}
func (*VersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Ukd server version.
type VersionReply struct {
	Major int32  `protobuf:"varint,1,opt,name=major" json:"major,omitempty"`
	Minor string `protobuf:"bytes,2,opt,name=minor" json:"minor,omitempty"`
}

func (m *VersionReply) Reset()                    { *m = VersionReply{} }
func (m *VersionReply) String() string            { return proto.CompactTextString(m) }
func (*VersionReply) ProtoMessage()               {}
func (*VersionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Request message containing image name and image location.
type StartRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Visor    string `protobuf:"bytes,2,opt,name=visor" json:"visor,omitempty"`
	Location string `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
}

func (m *StartRequest) Reset()                    { *m = StartRequest{} }
func (m *StartRequest) String() string            { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()               {}
func (*StartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Response message signalling result of start attempt.
type StartReply struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Ip      string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	Info    string `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
}

func (m *StartReply) Reset()                    { *m = StartReply{} }
func (m *StartReply) String() string            { return proto.CompactTextString(m) }
func (*StartReply) ProtoMessage()               {}
func (*StartReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// Request message containing the image name.
type StopRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *StopRequest) Reset()                    { *m = StopRequest{} }
func (m *StopRequest) String() string            { return proto.CompactTextString(m) }
func (*StopRequest) ProtoMessage()               {}
func (*StopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// Response message signalling result of stop attempt.
type StopReply struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Info    string `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (m *StopReply) Reset()                    { *m = StopReply{} }
func (m *StopReply) String() string            { return proto.CompactTextString(m) }
func (*StopReply) ProtoMessage()               {}
func (*StopReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ImageSignatureRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *ImageSignatureRequest) Reset()                    { *m = ImageSignatureRequest{} }
func (m *ImageSignatureRequest) String() string            { return proto.CompactTextString(m) }
func (*ImageSignatureRequest) ProtoMessage()               {}
func (*ImageSignatureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ImageSignatureReply struct {
	Success   bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Info      string `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
}

func (m *ImageSignatureReply) Reset()                    { *m = ImageSignatureReply{} }
func (m *ImageSignatureReply) String() string            { return proto.CompactTextString(m) }
func (*ImageSignatureReply) ProtoMessage()               {}
func (*ImageSignatureReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type UpdateImageRequest struct {
	Base    string `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Basesig []byte `protobuf:"bytes,2,opt,name=basesig,proto3" json:"basesig,omitempty"`
	Newsig  []byte `protobuf:"bytes,3,opt,name=newsig,proto3" json:"newsig,omitempty"`
	Diff    []byte `protobuf:"bytes,4,opt,name=diff,proto3" json:"diff,omitempty"`
}

func (m *UpdateImageRequest) Reset()                    { *m = UpdateImageRequest{} }
func (m *UpdateImageRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateImageRequest) ProtoMessage()               {}
func (*UpdateImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type UpdateImageReply struct {
	Success         bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	StagedImagePath string `protobuf:"bytes,2,opt,name=stagedImagePath" json:"stagedImagePath,omitempty"`
	Info            string `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
}

func (m *UpdateImageReply) Reset()                    { *m = UpdateImageReply{} }
func (m *UpdateImageReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateImageReply) ProtoMessage()               {}
func (*UpdateImageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type StatusRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

// Response message signalling result of stop attempt.
type StatusReply struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Status  string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Info    string `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
}

func (m *StatusReply) Reset()                    { *m = StatusReply{} }
func (m *StatusReply) String() string            { return proto.CompactTextString(m) }
func (*StatusReply) ProtoMessage()               {}
func (*StatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func init() {
	proto.RegisterType((*VersionRequest)(nil), "VersionRequest")
	proto.RegisterType((*VersionReply)(nil), "VersionReply")
	proto.RegisterType((*StartRequest)(nil), "StartRequest")
	proto.RegisterType((*StartReply)(nil), "StartReply")
	proto.RegisterType((*StopRequest)(nil), "StopRequest")
	proto.RegisterType((*StopReply)(nil), "StopReply")
	proto.RegisterType((*ImageSignatureRequest)(nil), "ImageSignatureRequest")
	proto.RegisterType((*ImageSignatureReply)(nil), "ImageSignatureReply")
	proto.RegisterType((*UpdateImageRequest)(nil), "UpdateImageRequest")
	proto.RegisterType((*UpdateImageReply)(nil), "UpdateImageReply")
	proto.RegisterType((*StatusRequest)(nil), "StatusRequest")
	proto.RegisterType((*StatusReply)(nil), "StatusReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Ukd service

type UkdClient interface {
	// Get Server Version.
	GetVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionReply, error)
	// Start a Unikernel.
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartReply, error)
	// Stop a Unikernel.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopReply, error)
	// Get image signature.
	GetImageSignature(ctx context.Context, in *ImageSignatureRequest, opts ...grpc.CallOption) (*ImageSignatureReply, error)
	// Update a Unikernel on-disk image.
	UpdateImage(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*UpdateImageReply, error)
	// Status of an app.
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error)
}

type ukdClient struct {
	cc *grpc.ClientConn
}

func NewUkdClient(cc *grpc.ClientConn) UkdClient {
	return &ukdClient{cc}
}

func (c *ukdClient) GetVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionReply, error) {
	out := new(VersionReply)
	err := grpc.Invoke(ctx, "/Ukd/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ukdClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartReply, error) {
	out := new(StartReply)
	err := grpc.Invoke(ctx, "/Ukd/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ukdClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopReply, error) {
	out := new(StopReply)
	err := grpc.Invoke(ctx, "/Ukd/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ukdClient) GetImageSignature(ctx context.Context, in *ImageSignatureRequest, opts ...grpc.CallOption) (*ImageSignatureReply, error) {
	out := new(ImageSignatureReply)
	err := grpc.Invoke(ctx, "/Ukd/GetImageSignature", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ukdClient) UpdateImage(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*UpdateImageReply, error) {
	out := new(UpdateImageReply)
	err := grpc.Invoke(ctx, "/Ukd/UpdateImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ukdClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := grpc.Invoke(ctx, "/Ukd/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ukd service

type UkdServer interface {
	// Get Server Version.
	GetVersion(context.Context, *VersionRequest) (*VersionReply, error)
	// Start a Unikernel.
	Start(context.Context, *StartRequest) (*StartReply, error)
	// Stop a Unikernel.
	Stop(context.Context, *StopRequest) (*StopReply, error)
	// Get image signature.
	GetImageSignature(context.Context, *ImageSignatureRequest) (*ImageSignatureReply, error)
	// Update a Unikernel on-disk image.
	UpdateImage(context.Context, *UpdateImageRequest) (*UpdateImageReply, error)
	// Status of an app.
	Status(context.Context, *StatusRequest) (*StatusReply, error)
}

func RegisterUkdServer(s *grpc.Server, srv UkdServer) {
	s.RegisterService(&_Ukd_serviceDesc, srv)
}

func _Ukd_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UkdServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ukd/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UkdServer).GetVersion(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ukd_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UkdServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ukd/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UkdServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ukd_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UkdServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ukd/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UkdServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ukd_GetImageSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UkdServer).GetImageSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ukd/GetImageSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UkdServer).GetImageSignature(ctx, req.(*ImageSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ukd_UpdateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UkdServer).UpdateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ukd/UpdateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UkdServer).UpdateImage(ctx, req.(*UpdateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ukd_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UkdServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ukd/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UkdServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ukd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Ukd",
	HandlerType: (*UkdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _Ukd_GetVersion_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Ukd_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Ukd_Stop_Handler,
		},
		{
			MethodName: "GetImageSignature",
			Handler:    _Ukd_GetImageSignature_Handler,
		},
		{
			MethodName: "UpdateImage",
			Handler:    _Ukd_UpdateImage_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Ukd_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x54, 0x4d, 0x6f, 0xd4, 0x30,
	0x10, 0x6d, 0xf7, 0x8b, 0x66, 0x36, 0xbb, 0x6d, 0xdd, 0x52, 0xad, 0x22, 0x0e, 0x60, 0x84, 0xb4,
	0x12, 0x92, 0x0f, 0x70, 0x40, 0x70, 0xe5, 0x80, 0xe0, 0x84, 0x12, 0xca, 0xdd, 0xdd, 0x78, 0x8b,
	0xcb, 0x6e, 0x12, 0x62, 0x07, 0xc4, 0x3f, 0xe2, 0x67, 0x62, 0x4f, 0x9c, 0xac, 0xb3, 0x8d, 0x72,
	0xda, 0x99, 0xc9, 0xf3, 0x7b, 0x33, 0x9e, 0xe7, 0x85, 0x80, 0x17, 0x92, 0x15, 0x65, 0xae, 0x73,
	0x7a, 0x01, 0xcb, 0xef, 0xa2, 0x54, 0x32, 0xcf, 0x62, 0xf1, 0xab, 0x12, 0x4a, 0xd3, 0x0f, 0x10,
	0xb6, 0x95, 0x62, 0xf7, 0x97, 0x5c, 0xc3, 0x74, 0xcf, 0x1f, 0xf2, 0x72, 0x75, 0xfa, 0xfc, 0x74,
	0x3d, 0x8d, 0xeb, 0x04, 0xab, 0x32, 0x33, 0xd5, 0x91, 0xa9, 0x06, 0x71, 0x9d, 0xd0, 0x6f, 0x10,
	0x26, 0x9a, 0x97, 0xda, 0x71, 0x11, 0x02, 0x93, 0x8c, 0xef, 0x05, 0x1e, 0x0d, 0x62, 0x8c, 0xed,
	0xc9, 0xdf, 0x52, 0x1d, 0x4e, 0x62, 0x42, 0x22, 0x38, 0xdb, 0xe5, 0x1b, 0xae, 0x8d, 0xec, 0x6a,
	0x8c, 0x1f, 0xda, 0x9c, 0x7e, 0x01, 0x70, 0xac, 0xb6, 0x9f, 0x15, 0x3c, 0x51, 0xd5, 0x66, 0x23,
	0x94, 0x42, 0xda, 0xb3, 0xb8, 0x49, 0xc9, 0x12, 0x46, 0xb2, 0x70, 0xb4, 0x26, 0xb2, 0xea, 0x32,
	0xdb, 0xe6, 0x8e, 0x0f, 0x63, 0xfa, 0x02, 0xe6, 0x89, 0xce, 0x8b, 0x81, 0x06, 0xe9, 0x7b, 0x08,
	0x6a, 0xc8, 0xb0, 0x5a, 0xc3, 0x3e, 0xf2, 0xd8, 0x5f, 0xc3, 0xd3, 0xcf, 0x7b, 0x7e, 0x2f, 0x12,
	0x79, 0x9f, 0x71, 0x5d, 0x95, 0xc2, 0xd3, 0x29, 0xb8, 0xfe, 0xd1, 0xe8, 0xd8, 0x98, 0x72, 0xb8,
	0x3a, 0x06, 0x0f, 0x2b, 0x3e, 0x83, 0x40, 0x35, 0x58, 0x94, 0x0d, 0xe3, 0x43, 0xa1, 0x77, 0xda,
	0x0c, 0xc8, 0x6d, 0x91, 0x72, 0x2d, 0x50, 0xc8, 0x6b, 0xe6, 0x8e, 0xab, 0x76, 0x68, 0x1b, 0x5b,
	0x55, 0xfb, 0x6b, 0xe8, 0x1c, 0x73, 0x93, 0x92, 0x1b, 0x98, 0x65, 0xe2, 0x8f, 0xfd, 0x30, 0xc6,
	0x0f, 0x2e, 0xb3, 0x2c, 0xa9, 0xdc, 0x6e, 0x57, 0x13, 0xac, 0x62, 0x4c, 0x1f, 0xe0, 0xa2, 0xa3,
	0x37, 0x3c, 0xcf, 0x1a, 0xce, 0x95, 0x36, 0xb8, 0x14, 0xd1, 0x5f, 0xed, 0xfd, 0xd4, 0x97, 0x79,
	0x5c, 0xee, 0x9d, 0xed, 0x25, 0x2c, 0x8c, 0x2b, 0x74, 0xa5, 0x86, 0x76, 0x99, 0xd8, 0x75, 0xd7,
	0xa0, 0xe1, 0x5e, 0xcc, 0x94, 0x0a, 0x81, 0xae, 0x05, 0x97, 0xf5, 0x29, 0xbf, 0xf9, 0x37, 0x82,
	0xf1, 0xed, 0xcf, 0x94, 0x30, 0x80, 0x4f, 0x42, 0xbb, 0xc7, 0x42, 0xce, 0x59, 0xf7, 0x21, 0x45,
	0x0b, 0xe6, 0xbf, 0x23, 0x7a, 0x42, 0x5e, 0xc1, 0x14, 0x7d, 0x4c, 0x16, 0xcc, 0x7f, 0x25, 0xd1,
	0x9c, 0x1d, 0xec, 0x6d, 0x60, 0x14, 0x26, 0xd6, 0x7f, 0x24, 0x64, 0x9e, 0x53, 0x23, 0x60, 0xad,
	0x29, 0x0d, 0xe6, 0x23, 0x5c, 0x1a, 0xe9, 0xae, 0x7d, 0xc8, 0x0d, 0xeb, 0x35, 0x5f, 0x74, 0xcd,
	0x7a, 0x7c, 0x66, 0x48, 0xde, 0xc1, 0xdc, 0xdb, 0x16, 0xb9, 0x62, 0x8f, 0xbd, 0x12, 0x5d, 0xb2,
	0xe3, 0x85, 0x9a, 0x83, 0x6b, 0x98, 0xd5, 0xb7, 0x4a, 0x96, 0xac, 0xb3, 0x83, 0x28, 0x64, 0xde,
	0x75, 0xd3, 0x93, 0xbb, 0x19, 0xfe, 0xcb, 0xbc, 0xfd, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xce, 0xf0,
	0xce, 0x1f, 0x72, 0x04, 0x00, 0x00,
}
